{"version":3,"sources":["webpack:///./src/plugins/serial/base-serial.js"],"names":["BaseSerial","requestRequired","mute","baud","Number","window","localStorage","currentBaudRate","lastBaud","encoding","devices","currentDevice","connected","implementation","Vue","$serial","this","prototype","Promise","all","map","device","isDevice","value","isDevices","filter","i","disconnect","console","error","connect","setBaud","val","sig","dtr","rts","dataTerminalReady","requestToSend","signals","message","buff","name","push","find","d","EventEmitter"],"mappings":"mSAaMA,E,wDACJ,aAAc,oCACZ,eACA,EAAKC,iBAAkB,EACvB,EAAKC,MAAO,EACZ,EAAKC,KAAOC,OAAOC,OAAOC,aAAaC,kBAAoB,OAC3D,EAAKC,SAAW,OAChB,EAAKC,SAAW,QAChB,EAAKC,QAAU,GACf,EAAKC,cAAgB,KACrB,EAAKC,WAAY,EACjB,EAAKC,eAAiB,QAVV,E,uDAaNC,GAENA,EAAIC,QAAUC,KAEdF,EAAIG,UAAUF,QAAUC,O,2MAGK,I,iTAGLE,QAAQC,IAAIH,KAAKN,QAAQU,KAAI,SAACC,GAAD,OAAY,EAAKC,SAASD,EAAOE,W,cAAhFC,E,yBACCR,KAAKN,QAAQe,QAAO,SAACJ,EAAQK,GAAT,OAAeF,EAAUE,O,mMAGvCH,G,2GAAgB,G,uMAERA,G,iFAASP,KAAKL,cAAgBY,E,mMAEvCpB,G,0GAEJa,KAAKW,a,yDAEGC,QAAQC,MAAR,M,cAGhBb,KAAKR,SAAWQ,KAAKb,KACrBa,KAAKb,KAAOA,E,UACNa,KAAKc,U,eAGXzB,OAAOC,aAAaC,gBAAkBJ,E,kBAC/BA,G,iSAIPa,KAAKe,QAAQf,KAAKR,U,kMAGNwB,G,iFAAOhB,KAAKd,KAAO8B,E,6IAEpBC,GACX,MAAY,OAARA,IAAwB,IAARA,EACX,CACLC,KAAK,EACLC,KAAK,EACLC,mBAAmB,EACnBC,eAAe,GAGP,QAARJ,IAAyB,IAARA,EACZ,CACLC,KAAK,EACLC,KAAK,EACLC,mBAAmB,EACnBC,eAAe,GAGZJ,I,4FAGQK,G,0GAAkBA,G,4LAEvBC,G,0GAAkBA,G,gMAEdC,G,0GAAeA,G,iRAEbxB,KAAKJ,WAAY,E,wRAEdI,KAAKJ,WAAY,E,wMAElBW,EAAOkB,G,iGACfzB,KAAKM,SAASC,G,kCAAQP,KAAKN,QAAQgC,KAAK,CAAEnB,QAAOkB,S,2MAGzClB,G,2GACVP,KAAKN,QAAQiC,MAAK,SAACC,GAAD,OAAOA,EAAErB,QAAUA,MAAU,CAAEkB,KAAM,KAAMA,M,+GAzFhDI,KA6FV7C","file":"js/serial-base.d25d1b83.js","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\nimport EventEmitter from 'events';\n\n/*\nInterface should emit the following:\nthis.emit('data', buffer)\nthis.emit('message', string) // should be a string version of buffer\n// message should not be emitted whilst this.mute === true\nthis.emit('connected', value)\nthis.emit('disconnected', value)\nthis.emit('deviceNamePrompt', value) // prompts the user to input a readable device name\n*/\nclass BaseSerial extends EventEmitter {\n  constructor() {\n    super();\n    this.requestRequired = false;\n    this.mute = false;\n    this.baud = Number(window.localStorage.currentBaudRate) || 115200;\n    this.lastBaud = 115200;\n    this.encoding = 'ascii';\n    this.devices = [];\n    this.currentDevice = null;\n    this.connected = false;\n    this.implementation = 'basic';\n  }\n\n  install(Vue) {\n    // eslint-disable-next-line no-param-reassign\n    Vue.$serial = this;\n    // eslint-disable-next-line no-param-reassign\n    Vue.prototype.$serial = this;\n  }\n\n  async requestDevice() { return {}; }\n\n  async listDevices() {\n    const isDevices = await Promise.all(this.devices.map((device) => this.isDevice(device.value)));\n    return this.devices.filter((device, i) => isDevices[i]);\n  }\n\n  async isDevice(value) { return true; }\n\n  async setCurrentDevice(value) { this.currentDevice = value; }\n\n  async setBaud(baud) {\n    try {\n      await this.disconnect();\n      // eslint-disable-next-line no-console\n    } catch (err) { console.error(err); }\n    // eslint-disable-next-line no-console\n    // console.log('disconnected');\n    this.lastBaud = this.baud;\n    this.baud = baud;\n    await this.connect();\n    // eslint-disable-next-line no-console\n    // console.log('connected');\n    window.localStorage.currentBaudRate = baud;\n    return baud;\n  }\n\n  async resetBaud() {\n    this.setBaud(this.lastBaud);\n  }\n\n  async setMute(val) { this.mute = val; }\n\n  _transSignal(sig) {\n    if (sig === 'on' || sig === true) {\n      return {\n        dtr: true,\n        rts: true,\n        dataTerminalReady: true,\n        requestToSend: true,\n      };\n    }\n    if (sig === 'off' || sig === false) {\n      return {\n        dtr: false,\n        rts: false,\n        dataTerminalReady: false,\n        requestToSend: false,\n      };\n    }\n    return sig;\n  }\n\n  async setSignals(signals) { return signals; }\n\n  async write(message) { return message; }\n\n  async writeBuff(buff) { return buff; }\n\n  async connect() { this.connected = true; }\n\n  async disconnect() { this.connected = false; }\n\n  async setDeviceName(value, name) {\n    if (await this.isDevice(value)) this.devices.push({ value, name });\n  }\n\n  async getDeviceName(value) {\n    return (this.devices.find((d) => d.value === value) || { name: '' }).name;\n  }\n}\n\nexport default BaseSerial;\n"],"sourceRoot":""}